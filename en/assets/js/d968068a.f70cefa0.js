"use strict";(self.webpackChunk_pbp_fasilkom_ui_ganjil_2023=self.webpackChunk_pbp_fasilkom_ui_ganjil_2023||[]).push([[446],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(n),m=a,p=g["".concat(s,".").concat(m)]||g[m]||d[m]||r;return n?i.createElement(p,o(o({ref:t},u),{},{components:n})):i.createElement(p,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_label:"Git Cheatsheet"},o="Git Cheatsheet",l={unversionedId:"git/git-cheatsheet",id:"git/git-cheatsheet",title:"Git Cheatsheet",description:"Basic Operations",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/git/git-cheatsheet.md",sourceDirName:"git",slug:"/git/git-cheatsheet",permalink:"/ganjil-2023/en/docs/git/git-cheatsheet",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Git Cheatsheet"},sidebar:"defaultSidebar",previous:{title:"More Elements",permalink:"/ganjil-2023/en/docs/html/more-elements"}},s={},c=[{value:"Basic Operations",id:"basic-operations",level:2},{value:"View current branch status",id:"view-current-branch-status",level:3},{value:"Use <code>git status</code>",id:"use-git-status",level:4},{value:"Staging (Adding) Files",id:"staging-adding-files",level:3},{value:"Adding a single file",id:"adding-a-single-file",level:4},{value:"Adding multiple files",id:"adding-multiple-files",level:4},{value:"Adding all unstaged files",id:"adding-all-unstaged-files",level:4},{value:"Commit",id:"commit",level:3},{value:"Commit using default text editor (vi in most cases)",id:"commit-using-default-text-editor-vi-in-most-cases",level:4},{value:"Commit using command line flag (<code>git commit -m</code>)",id:"commit-using-command-line-flag-git-commit--m",level:4},{value:"Branch",id:"branch",level:3},{value:"Switching Branches",id:"switching-branches",level:4},{value:"Option 1: using <code>git checkout</code>",id:"option-1-using-git-checkout",level:5},{value:"Option 2: using <code>git switch</code>",id:"option-2-using-git-switch",level:5},{value:"Creating A New Branch (based on current branch)",id:"creating-a-new-branch-based-on-current-branch",level:4},{value:"Option 1: using <code>git checkout</code>",id:"option-1-using-git-checkout-1",level:5},{value:"Option 2: using <code>git switch</code>",id:"option-2-using-git-switch-1",level:5}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git-cheatsheet"},"Git Cheatsheet"),(0,a.kt)("h2",{id:"basic-operations"},"Basic Operations"),(0,a.kt)("h3",{id:"view-current-branch-status"},"View current branch status"),(0,a.kt)("h4",{id:"use-git-status"},"Use ",(0,a.kt)("inlineCode",{parentName:"h4"},"git status")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n")),(0,a.kt)("p",null,"To check the status of your current git project, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"git status")," command. This command will give you an overview of any unpushed commits and the details of any untracked/staged files that you might have in your current project. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Do not forget to check this command before you start developing on a new feature"),". You definitely do not want to work for 30-60 minutes on a functionality only to find out that you did it in the wrong branch."),(0,a.kt)("h3",{id:"staging-adding-files"},"Staging (Adding) Files"),(0,a.kt)("h4",{id:"adding-a-single-file"},"Adding a single file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git add <file_name>\n")),(0,a.kt)("h4",{id:"adding-multiple-files"},"Adding multiple files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git add <file-1> <file-2> <file-3> ... <file-n>\n")),(0,a.kt)("h4",{id:"adding-all-unstaged-files"},"Adding all unstaged files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git add .\n")),(0,a.kt)("h3",{id:"commit"},"Commit"),(0,a.kt)("h4",{id:"commit-using-default-text-editor-vi-in-most-cases"},"Commit using default text editor (vi in most cases)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# If using vi: Write commit message by pressing 'i' to enter insert mode, type your commit message, press 'ESCAPE' to exit insert mode, then type :wq to save.\ngit commit\n")),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"vi")," has a ",(0,a.kt)("strong",{parentName:"p"},"very steep")," learning curve. If you accidentally find yourself in this editor, exit it by doing the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Press ",(0,a.kt)("inlineCode",{parentName:"li"},":")," (",(0,a.kt)("inlineCode",{parentName:"li"},"SHIFT + ;"),")"),(0,a.kt)("li",{parentName:"ol"},"Type ",(0,a.kt)("inlineCode",{parentName:"li"},"q!")," and press ",(0,a.kt)("inlineCode",{parentName:"li"},"ENTER")),(0,a.kt)("li",{parentName:"ol"},"Continue creating a commit by using ",(0,a.kt)("inlineCode",{parentName:"li"},'git commit -m "<MESSAGE>"'))),(0,a.kt)("h4",{id:"commit-using-command-line-flag-git-commit--m"},"Commit using command line flag (",(0,a.kt)("inlineCode",{parentName:"h4"},"git commit -m"),")"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -m "COMMIT MESSAGE HERE"\n')),(0,a.kt)("h3",{id:"branch"},"Branch"),(0,a.kt)("p",null,"In general when switching branches you can use either ",(0,a.kt)("inlineCode",{parentName:"p"},"git checkout")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"git switch"),". Online tutorials will usually teach you how to change branches using ",(0,a.kt)("inlineCode",{parentName:"p"},"git checkout"),", but it is up to you which one to use."),(0,a.kt)("h4",{id:"switching-branches"},"Switching Branches"),(0,a.kt)("h5",{id:"option-1-using-git-checkout"},"Option 1: using ",(0,a.kt)("inlineCode",{parentName:"h5"},"git checkout")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout <branch_name>\n")),(0,a.kt)("h5",{id:"option-2-using-git-switch"},"Option 2: using ",(0,a.kt)("inlineCode",{parentName:"h5"},"git switch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git switch <branch_name>\n")),(0,a.kt)("h4",{id:"creating-a-new-branch-based-on-current-branch"},"Creating A New Branch (based on current branch)"),(0,a.kt)("h5",{id:"option-1-using-git-checkout-1"},"Option 1: using ",(0,a.kt)("inlineCode",{parentName:"h5"},"git checkout")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b <branch_name>\n")),(0,a.kt)("h5",{id:"option-2-using-git-switch-1"},"Option 2: using ",(0,a.kt)("inlineCode",{parentName:"h5"},"git switch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git switch -c <branch_name>\n")),(0,a.kt)("p",null,"Branches are used to manage multiple versions of your code. This is useful when working in a team and/or to have a separate space for implementing features of your website so it can be more easily managed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"You should always take advantage of branches in complex projects"),", especially when doing group work as it minimizes the risk of having conflicts between you and your co-workers."))}d.isMDXComponent=!0}}]);